volumes: # Define o volume para persistência dos dados do banco de dados.
  db_user:
    name: db_user
  kafka-data:
    name: kafka-data

networks: # Define a rede de comunicação entre os containers.
  communication:
    name: communication
    driver: bridge # Usar driver bridge para comunicação local e acesso à internet. Permite isolamento e controle de rede.

services: # Define os serviços (containers) que serão executados.

  kafka:
    image: lensesio/fast-data-dev:3.9
    container_name: kafka
    hostname: kafka
    ports:
      - 2181:2181              # ZooKeeper
      - 3030:3030              # Landoop UI
      - 8081-8081              # Schema Registry
      - 8082-8082              # Kafka Rest Proxy
      - 8083-8083              # Kafka Connect
      - 9092:9092              # Kafka Broker
      - 9581-9585:9581-9585    # JMX Ports
      - 19092-19092            # For internal Docker access
    environment:
#      KAFKA_LISTENERS: PLAINTEXT://:9092,DOCKERCOMPOSE://:19092,CONTROLLER://:16062 # Define os endereços e portas onde o Kafka escuta conexões: PLAINTEXT://:9092: O Kafka escuta na porta 9092 para conexões sem criptografia (plaintext). DOCKERCOMPOSE://:19092: Um listener interno para comunicação dentro da rede do Docker Compose, usando a porta 19092. CONTROLLER://:16062: Usado para comunicação interna no modo KRaft, onde os nós do Kafka (controladores) se comunicam para gerenciar metadados.
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,DOCKERCOMPOSE://demo-kafka:19092 # Define os endereços que o Kafka anuncia para os clientes se conectarem: PLAINTEXT://localhost:9092: Clientes fora do Docker (por exemplo, no host local) podem se conectar ao Kafka via localhost:9092. DOCKERCOMPOSE://demo-kafka:19092: Clientes dentro da rede Docker Compose podem se conectar ao serviço demo-kafka na porta 19092.
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: > # Mapeia os listeners aos protocolos de segurança suportados: DOCKERCOMPOSE:PLAINTEXT, CONTROLLER:PLAINTEXT, PLAINTEXT:PLAINTEXT: Esses listeners usam comunicação sem criptografia. SSL:SSL, SASL_PLAINTEXT:SASL_PLAINTEXT, SASL_SSL:SASL_SSL: Suporta conexões seguras com SSL ou SASL, embora não estejam configuradas ativamente aqui.
#        DOCKERCOMPOSE:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,
#        SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
#      KAFKA_DELETE_TOPIC_ENABLE: "true"
      ADV_HOST: kafka          # Define o endereço de host (127.0.0.1 - localhost) - precisará ajustar isso para o IP do host ou o nome do serviço na rede Docker. Define o hostname anunciado pelo Kafka para conexões externas.
      RUNTESTS: 0              # Desativa testes iniciais para iniciar mais rápido
      SAMPLEDATA: 0            # Desativa dados de exemplo
      FORWARDLOGS: 0           # Desativa forwarding de logs
      DEBUG: 0                 # Desabilita modo debug
      CONNECT_HEAP: 512m       # Aloca heap para o Kafka Connect
      DISABLE: azure-documentdb,blockchain,bloomberg,cassandra,coap,druid,elastic,elastic5,ftp,hazelcast,hbase,influxdb,jms,kudu,mongodb,mqtt,redis,rethink,voltdb,yahoo,hdfs,jdbc,elasticsearch,s3,twitter,debezium-mongodb,debezium-mysql,debezium-postgres,debezium-sqlserver,debezium-jdbc
    volumes:  # opcional se quiser persistir dados
      - kafka-data:/data
    networks:
      - communication

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    ports:
      - 9000:9000  # Acesse em http://localhost:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      - kafka
    networks:
      - communication

  api_user:
    container_name: api_user
    image: juniorsmartins/api_user:v0.0.1
    build:
      context: ../api-user
      dockerfile: Dockerfile
      args:
        APP_NAME: "api_user"
        APP_VERSION: "v0.0.1"
        APP_DESCRIPTION: "API de Usuários para segurança de sistema financeiro."
    ports:
      - "9050:9050"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    environment:
      - DB_HOST=database_user
      - DB_NAME=db_user
      - DB_PORT=5432
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    restart: on-failure
    networks:
      - communication
    depends_on:
      database_user:
        condition: service_started
      kafka:
        condition: service_started

#  api_account:
#    container_name: api_account
#    image: juniorsmartins/api_account:v0.0.1
#    build:
#      context: ../api-account
#      dockerfile: Dockerfile
#      args:
#        APP_NAME: "api_account"
#        APP_VERSION: "v0.0.1"
#        APP_DESCRIPTION: "API de Contas para sistema financeiro."
#    ports:
#      - "9060:9060"
#    deploy:
#      resources:
#        limits:
#          cpus: '1.0'
#          memory: 512M
#    environment:
#      - DB_HOST=database_account
#      - DB_NAME=db_account
#      - DB_PORT=5432
#      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
#    restart: on-failure
#    networks:
#      - communication
#    depends_on:
#      database_account:
#        condition: service_started
#      kafka:
#        condition: service_started

  database_user:
    container_name: database_user
    image: postgres:17.0
    ports:
      - "5501:5432"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    restart: always
    environment:
      POSTGRES_DB: db_user
#      POSTGRES_MULTIPLE_DATABASES: db_user, db_outro1, db_outro2
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - db_user:/var/lib/postgresql/data
    networks:
      - communication

#  database_account:
#    container_name: database_account
#    image: postgres:16.0
#    ports:
#      - "5505:5432"
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 512M
#    restart: on-failure
#    environment:
#      - POSTGRES_DB=account
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=postgres
#    volumes:
#      - db_account:/var/lib/postgresql/data
#    networks:
#      - communication