spring:

  datasource: # Configura o datasource do banco de dados.
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE # Define a URL de conexão ao banco.
    username: sa
    password:

  # Configurações de JPA e de Hibernate
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    defer-datasource-initialization: true
    show-sql: true

  sql: # Habilita ou desabilita acionamento de script SQL
    init:
      mode: never
      data-locations: []

  # Habilitar o console do H2 (opcional)
  h2:
    console:
      enabled: true
      path: /h2-console

  liquibase:
    enabled: false

  kafka:
    bootstrap-servers: ${spring.embedded.kafka.brokers} # Usa broker embutido
    topic:
      event-create-customer: event-create-customer
    properties:
      schema.registry.url: mock://localhost # Usa o mock do Schema Registry
      specific.avro.reader: true
      enable.idempotence: true
      auto.register.schemas: true
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    consumer:
      group-id: group-api-user-customer
      auto-offset-reset: earliest # Ou latest, dependendo do caso de uso - earliest lê desde o início do tópico
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
